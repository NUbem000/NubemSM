# Blue-Green deployment configuration for nginx

# Upstream definitions
upstream blue_backend {
    server app-blue:3001 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream green_backend {
    server app-green:3002 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Map to determine active backend
map $cookie_deployment $backend_pool {
    "green" green_backend;
    default blue_backend;  # Blue is default
}

# Server configuration
server {
    listen 80;
    server_name localhost;

    # Health check endpoint (always goes to active backend)
    location = /health {
        proxy_pass http://$backend_pool;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        access_log off;
    }

    # Blue deployment testing endpoint
    location /test/blue {
        proxy_pass http://blue_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Deployment-Color "blue";
    }

    # Green deployment testing endpoint
    location /test/green {
        proxy_pass http://green_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Deployment-Color "green";
    }

    # Switch to blue deployment
    location = /switch/blue {
        add_header Set-Cookie "deployment=blue; Path=/; HttpOnly; SameSite=Strict";
        return 302 /;
    }

    # Switch to green deployment
    location = /switch/green {
        add_header Set-Cookie "deployment=green; Path=/; HttpOnly; SameSite=Strict";
        return 302 /;
    }

    # Main application
    location / {
        proxy_pass http://$backend_pool;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Add deployment color header
        add_header X-Served-By $backend_pool always;
        
        # Timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}

# Admin interface for controlling deployments
server {
    listen 8081;
    server_name localhost;
    
    # Basic auth for admin endpoints
    auth_basic "Admin Access";
    auth_basic_user_file /etc/nginx/.htpasswd;
    
    location / {
        default_type text/html;
        return 200 '<html>
<head><title>Blue-Green Control Panel</title></head>
<body>
<h1>Blue-Green Deployment Control</h1>
<p>Current default: Blue</p>
<ul>
<li><a href="/switch/blue">Switch to Blue</a></li>
<li><a href="/switch/green">Switch to Green</a></li>
<li><a href="/status">View Status</a></li>
</ul>
</body>
</html>';
    }
    
    location /status {
        default_type application/json;
        content_by_lua_block {
            local blue_status = "unknown"
            local green_status = "unknown"
            
            -- Check blue backend
            local blue_res = ngx.location.capture("/test/blue/health")
            if blue_res.status == 200 then
                blue_status = "healthy"
            else
                blue_status = "unhealthy"
            end
            
            -- Check green backend  
            local green_res = ngx.location.capture("/test/green/health")
            if green_res.status == 200 then
                green_status = "healthy"
            else
                green_status = "unhealthy"
            end
            
            ngx.say('{"blue":"' .. blue_status .. '","green":"' .. green_status .. '"}')
        }
    }
    
    location /switch/blue {
        default_type application/json;
        return 200 '{"status":"switched to blue"}';
    }
    
    location /switch/green {
        default_type application/json;
        return 200 '{"status":"switched to green"}';
    }
}