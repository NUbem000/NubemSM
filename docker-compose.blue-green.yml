version: '3.8'

services:
  # Blue deployment
  app-blue:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: speedmonitor-app-blue
    restart: unless-stopped
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: db
      SPEEDTEST_INTERVAL: ${SPEEDTEST_INTERVAL:-300000}
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DEPLOYMENT_COLOR: blue
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - speedmonitor-network
    labels:
      - "traefik.enable=false"

  # Green deployment
  app-green:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: speedmonitor-app-green
    restart: unless-stopped
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: db
      SPEEDTEST_INTERVAL: ${SPEEDTEST_INTERVAL:-300000}
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DEPLOYMENT_COLOR: green
      PORT: 3002
    ports:
      - "3002:3002"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - speedmonitor-network
    labels:
      - "traefik.enable=false"

  # Load balancer / Reverse proxy
  nginx:
    image: nginx:alpine
    container_name: speedmonitor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/blue-green.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - app-blue
      - app-green
    networks:
      - speedmonitor-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database (shared between blue and green)
  db:
    image: postgres:15-alpine
    container_name: speedmonitor-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/001-init.sql:ro
      - ./db/migrations:/docker-entrypoint-initdb.d/migrations:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - speedmonitor-network

  # Redis for shared cache/sessions
  redis:
    image: redis:7-alpine
    container_name: speedmonitor-redis
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - speedmonitor-network

  # Control panel for blue-green switching
  control-panel:
    image: node:18-alpine
    container_name: speedmonitor-control
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./control-panel:/app
      - /var/run/docker.sock:/var/run/docker.sock
    command: node index.js
    ports:
      - "8080:8080"
    environment:
      ADMIN_PASSWORD: ${CONTROL_PANEL_PASSWORD:-changeme}
    networks:
      - speedmonitor-network

volumes:
  postgres_data:
  nginx-cache:

networks:
  speedmonitor-network:
    driver: bridge